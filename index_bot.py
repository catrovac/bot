import fake_useragent
import requests
from selenium import webdriver
import telebot
from telebot import types
from bs4 import BeautifulSoup
from settings import tokken
from db_bot import data_base_bot
import time
#from payments import Payments


class Request(object):
    headers = {"user-agent": fake_useragent.UserAgent().data_browsers["chrome"][0]}

    def request_from(self):
        url = f"https://baza-gai.com.ua/nomer/{self.number}"
        result = requests.get(url, headers=self.headers)
        if result.status_code == 200:
            with open('index.html', 'w', encoding='utf-8') as file:
                file.write(result.text)

            soup = BeautifulSoup(result.text, "lxml")
            try:
                vin = soup.find('span', id='vin-code-erased').get('data-full')

            except Exception as _ex:
                vin = 'Vin –∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'
            vin = "VIN : " + vin
            all_info = soup.find("tbody").find_all("td")
            date = f"–î–ê–¢–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò : {str(all_info[0].text).strip()}"
            mark = ' '.join(str(all_info[1].text).split())
            mark = '–ú–ê–†–ö–ê : ' + mark
            dvig = str(all_info[2].text)
            dvig = "–¶–í–ï–¢ –ò –û–ë–¨–ï–ú : " + dvig
            info = ' '.join(str(all_info[3].text).split())
            info = '–û–ü–ò–°–ê–ù–ò–ï : ' + info
            user_info = all_info[4].text
            user_info = "–ò–ù–§–û–†–ú–ê–¶–ò–Ø : " + user_info
            stolen = str(soup.find('div', class_='stolen-info').text).strip()
            stolen = "–û–ë –£–ì–û–ù–ï : " + stolen
            photo = soup.find('div', class_='text-center mt-3 mx-auto').find('img').get('src')
            imge_url = 'https://baza-gai.com.ua' + photo
            result_image = requests.get(imge_url, headers=self.headers).content
            with open('1.jpg', "wb") as file:
                file.write(result_image)
            return mark, date, vin, dvig, info, user_info, stolen


client = telebot.TeleBot(tokken)

command_list = ['/start - –Ω–∞—á–∞–ª–æ —Ä–æ–±–æ—Ç—ã', '/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', '/auto - –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å', '/abouth - –æ –Ω–∞—Å']


@client.message_handler(commands=['start', 'info', 'auto', 'abouth'])
def tele_commands(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key1 = types.KeyboardButton("üîç - –ü—Ä–æ–±–∏—Ç—å –∞–≤—Ç–æ")
    key2 = types.KeyboardButton("‚ÑπÔ∏è- –ò–Ω—Ñ–æ –æ –±–æ—Ç–µ")
    key3 = types.KeyboardButton("üÜò - –ü–æ–º–æ—â—å")
    #key4 = types.KeyboardButton("‚òïÔ∏è–†–æ–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")

    markup.add(key1, key2, key3)
    if message.text == '/start'.lower():
        try:
            username = message.json['from']['first_name']
            mess = f"–ü—Ä–∏–≤–µ—Ç {username}! \n—ç—Ç–æ—Ç –±–æ—Ç –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ –≤ –£–∫—Ä–∞–∏–Ω–µ üá∫üá¶" \
                   f"–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∞–Ω–¥ üëâ /info üëà"
            # print(username)
        except Exception as use:
            username = "Username"
        client.send_message(message.chat.id, mess, reply_markup=markup)
    elif message.text == '/info'.lower():
        x = '–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ üõ†\n'
        mess = f'{x}–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n' + '\n'.join(command_list)
        client.send_message(message.chat.id, mess)
    elif message.text == '/auto'.lower():
        msg = client.send_message(message.chat.id, "–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, (AX6534BI)")
        client.register_next_step_handler(msg, cars_info)
    elif message.text == '/abouth'.lower():
        mess = """
        –ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥,\n –ú—ã –º–æ–ª–æ–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞—é—â–∞—è –ø–æ–ª–µ–∑–Ω—ã–µ –≤–µ—â–∏ –¥–ª—è –ª—é–¥–µ–π!\n–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∑—è—Ç–∞ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ì–ê–ò
–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞—á–µ–≥–æ–¥–Ω–µ—à–Ω–∏–π –¥–µ–Ω—å!\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.
        """
        client.send_message(message.chat.id, str(mess).strip())


@client.callback_query_handler(func=lambda call: True)
def call_lambda(call):
    if call.data == 'yes':
        msg = client.send_message(call.message.chat.id, "–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, (AX6534BI)", parse_mode='Markdown')
        client.register_next_step_handler(msg, cars_info)
    else:
        client.send_message(call.message.chat.id, "–û—á–µ–Ω—å –∂–∞–ª—å", parse_mode='Markdown')


@client.message_handler(content_types=['text'])
def mess_from_user(message):
    if message.text == "üîç - –ü—Ä–æ–±–∏—Ç—å –∞–≤—Ç–æ":
        msg = client.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ê–ê6565BI)')
        client.register_next_step_handler(msg, cars_info)
    elif message.text == "‚ÑπÔ∏è- –ò–Ω—Ñ–æ –æ –±–æ—Ç–µ":
        x = '–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ üõ†\n'
        mess = f'{x}–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n' + '\n'.join(command_list)
        client.send_message(message.chat.id, mess)
    elif message.text == "üÜò - –ü–æ–º–æ—â—å":
        mess = """
–ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥,\n —ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ –£–∫—Ä–∞–∏–Ω–µ!
–¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /auto –∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∑—è—Ç–∞ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ì–ê–ò
–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω–µ—à–Ω–∏–π –¥–µ–Ω—å!
                """
        client.send_message(message.chat.id, str(mess).strip())
    #elif message.text == "‚òïÔ∏è–†–æ–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞":
    #    client.send_message(message.chat.id, f"–ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞ –≤ —Ä–æ–∑—Ä–∞–±–æ—Ç–∫–µ\n"
    #                                         f"–Ω–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É\n"
    #                                         f"(–ü—Ä–∏–≤–∞—Ç –±–∞–Ω–∫)")
    #    client.send_message(message.chat.id, "4149 6293 1594 0247")
        #Payments.user_pay(self=Payments,client=client, chat_id=message.chat.id)


def cars_info(message):
    data_base_bot(message)
    try:
        print(message.text)
        # –Ω–∏–∂–µ –ø—Ä–∏–≤–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ä–æ–±–æ—á–∏–π
        Request.number = str(message.text).upper()
        req = Request.request_from(self=Request)
        mess = '\n'.join(req)
        rep = types.InlineKeyboardMarkup()
        yes = types.InlineKeyboardButton(text="–î–∞", callback_data="yes")
        no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")
        rep.add(yes, no)
        client.send_message(message.chat.id, mess)
        client.send_message(message.chat.id, "–§–æ—Ç–æ –≤–∑—è—Ç–æ —Å –±–∞–∑—ã –ì–ê–ò —Ü–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–º—É")
        client.send_photo(message.chat.id, photo=open('1.jpg', 'rb'))
        client.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–±–∏—Ç—å –µ—â–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å", reply_markup=rep)
    except Exception as _ex:
        client.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä {str(message.text).upper()} '
                                             f'–ø—Ä–æ–≤–µ—Ä—Ç–µ –ø—Ä–∞–≤–µ–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞')


def main():
    client.polling(non_stop=True)


if __name__ == '__main__':
    main()
