import telebot
import fake_useragent
import requests
import bs4
from telebot import types
from fake_useragent import UserAgent
import sqlite3
import time
from requests.exceptions import ConnectionError
from urllib3.exceptions import ProtocolError
from conf import tokken, headers, api_id, api_hash

bot = telebot.TeleBot(tokken, True, 4)
bot.config = {'requests_kwargs': {'timeout': 60}, 'api_key': None}
bot.config['api_key'] = tokken

"|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
"|                                                           |"
"|                                                           |"
"|                        OOOOO                              |"
"|                      OO     OO                            |"
"|                      OO                                   |"
"|                      OO                                   |"
"|                      OO                                   |"
"|                      OO     OO                            |"
"|                        OOOOO                              |"
"|                                                           |"
"|                                                           |"
"|              bot by CATROVACER beta-1.2v                  |"
"|____________________________________________________________"

try:
    @bot.message_handler(commands=["start", "help", "auto", "viev"])
    def command_message(message):
        if str(message.text) == '/start':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            key1 = types.KeyboardButton("üîç - –ü—Ä–æ–±–∏—Ç—å –∞–≤—Ç–æ")
            key2 = types.KeyboardButton("‚ÑπÔ∏è- –ò–Ω—Ñ–æ –æ –±–æ—Ç–µ")
            key3 = types.KeyboardButton("üÜò - –ü–æ–º–æ—â—å")
            key4 = types.KeyboardButton("‚òïÔ∏è–†–æ–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")

            markup.add(key1, key2, key3, key4)
            if str(message.chat.first_name) != None:
                x = "–ü—Ä–∏–≤–µ—Ç"
                bot.send_message(message.chat.id, x + " " + message.chat.first_name + " "
                                                                                      "/help - —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç"
                                 , parse_mode='Markdown', reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç –ê–Ω–æ–Ω–∏–º", parse_mode='Markdown')
        if str(message.text) == '/help':
            bot.send_message(message.chat.id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", parse_mode='Markdown')
            x = list_command(message)
            return bot.send_message(message.chat.id, x, parse_mode='Markdown')

        if str(message.text) == "/auto":
            reply = types.InlineKeyboardMarkup()
            yes = types.InlineKeyboardButton(text="–î–∞", callback_data="yes")
            no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")
            reply.add(yes, no)

            bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ?", reply_markup=reply,
                             parse_mode='Markdown')


    @bot.callback_query_handler(func=lambda call: True)
    def call_lambda(call):
        if call.data == 'yes':
            msg = bot.send_message(call.message.chat.id, "–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, (AX6534BI)", parse_mode='Markdown')
            bot.register_next_step_handler(msg, cars_info)
        else:
            bot.send_message(call.message.chat.id, "–û—á–µ–Ω—å –∂–∞–ª—å", parse_mode='Markdown')


    @bot.message_handler(content_types=["text"])
    def incomming_message(message):
        if message.chat.type == "private":
            if str(message.text) == "üîç - –ü—Ä–æ–±–∏—Ç—å –∞–≤—Ç–æ":
                msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ê–ê5425–í–Ü", parse_mode='Markdown')
                bot.register_next_step_handler(msg, cars_info)
                # print(message.text)
            elif str(message.text) == "‚ÑπÔ∏è- –ò–Ω—Ñ–æ –æ –±–æ—Ç–µ":
                msg = bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", parse_mode='Markdown')
                bot.register_next_step_handler(msg, bot_info(message))
            else:
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä", parse_mode='Markdown')


    # bot.polling(none_stop=True)

    def list_command(message):
        commands = ["/start - –Ω–∞—á–∞–ª–æ —Ä–æ–±–æ—Ç—ã", "/help - –ø–æ–º–æ—â—å", "/viev - –∏–Ω—Ñ–æ—Ä–º–∞—Ü—ã—è –æ –±–æ—Ç–µ",
                    "/auto - –∏–Ω—Ñ–æ—Ä–º–∞—Ü—ã—è –æ–± –∞–≤—Ç–æ"]
        x_commands = "\n".join(commands)
        return x_commands


    def bot_info(message):
        return bot.send_message(message.chat.id, "–ù–∞—à –±–æ—Ç –±–µ—Ä–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–∞–π—Ç–∞ 'baza-gai.com.ua/' "
                                          "–µ—Å–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ —Ç–æ –æ–Ω –µ–≥–æ –Ω–∞–π–¥–µ—Ç –∏ –≤—ã–¥–∞—Å—Ç –ø–æ–ª–Ω—É—é "
                                          "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º!\n"
                                          "–µ—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                                parse_mode='Markdown')


    def cars_info(message):
        try:
            x = list(str(message.text).upper().split(" "))
            number = "".join(x)
            print(number)
            bot.send_message(message.chat.id, f"–í—ã –≤–≤–µ–ª–∏ {number} —Å–µ–π—á–∞—Å –º—ã –Ω–∞–π–¥–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                             parse_mode='Markdown')
            # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–∞–∑–µ –ì–ê–ò
            search = f"search?digits={number}"
            rec_url = "https://baza-gai.com.ua/" + search
            # –ø–æ—Å—ã–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é res
            res = requests.get(rec_url, headers=headers).text
            # —Å–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç —Å—É–ø–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            soup = bs4.BeautifulSoup(res, "lxml")
            # –Ω–∞—Ö–æ–¥–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è)
            mark = soup.find("h1", class_="text-center mb-3").text
            mark_auto = mark.strip().split()  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            mark_auto = ' '.join(mark_auto).strip()  # –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –µ–≥–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            # –Ω–∞—Ö–æ–¥–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–ø–∏—Å–æ–∫ –∏ –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ —É–≥–æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ugon
            oll_div = soup.find("div", class_="d-md-none").find_all("div")
            # —Ç–∞–∫ –∂–µ –∞–ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            num_auto = str(soup.find("div", class_="plate__text").text).strip()
            # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü—ã–µ–π –æ–± —É–≥–æ–Ω–µ
            ugon = str(oll_div[4].text).strip()
            # –ø–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ —Ä–æ–∑–ø–æ–ª–æ–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≥–æ—Ä–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            city = str(oll_div[3].text).strip()
            operations = str(oll_div[2].text).strip()
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é mess
            if "–ù–µ —á–∏—Å–ª–∏—Ç—Å—è" in str(ugon):
                mess = "üöò - " + str(mark_auto) + "\n" + "#Ô∏è‚É£ - " + str(num_auto).strip() + "\n" + "‚úÖ - " + str(
                    ugon) + "\n" + "üåÜ - " + str(city) + "\n" + "üìù - " + str(operations)
                rep = types.InlineKeyboardMarkup()
                yes = types.InlineKeyboardButton(text="–î–∞", callback_data="yes")
                no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")
                rep.add(yes, no)
                return bot.send_message(message.chat.id, f"–≤–æ—Ç —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É {number} \n\n {mess} \n\n"
                                                         f"—Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", reply_markup=rep,
                                        parse_mode='Markdown')
            else:
                mess = "üöò - " + str(mark_auto) + "\n" + "#Ô∏è‚É£ - " + str(num_auto).strip() + "\n" + "‚ùå - " + str(
                    ugon) + "\n" + "üåÜ - " + str(city) + "\n" + "üìù - " + str(operations)
                return bot.send_message(message.chat.id, f"–≤–æ—Ç —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É {number} \n {mess}",
                                        parse_mode='Markdown')
        except IndexError as index:
            print(index)
            rep = types.InlineKeyboardMarkup()
            yes = types.InlineKeyboardButton(text="–î–∞", callback_data="yes")
            no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")
            rep.add(yes, no)
            return bot.send_message(message.chat.id, "–ù–ï –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ",
                                    parse_mode='Markdown', reply_markup=rep)
        except AttributeError as atr:
            print(atr)
            rep = types.InlineKeyboardMarkup()
            yes = types.InlineKeyboardButton(text="–î–∞", callback_data="yes")
            no = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")
            rep.add(yes, no)
            return bot.send_message(message.chat.id,
                                    f"–ù–ï –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –Ω–æ–º–µ—Ä—É {number}, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ",
                                    parse_mode='Markdown', reply_markup=rep)

except requests.exceptions.ConnectionError as conn:
    print(conn)
except TypeError as typemessage:
    print(typemessage)
if __name__ == "__main__":
    bot.infinity_polling()
